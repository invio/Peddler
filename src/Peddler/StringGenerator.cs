using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace Peddler {

    /// <summary>
    ///   A generator for non-nullable strings of various lengths and characters.
    /// </summary>
    public class StringGenerator : IGenerator<String> {

        private static ISet<Char> defaultCharacters { get; } = CharacterSets.AsciiPrintable;
        private Random random { get; } = new Random();
        private char[] characters { get; }

        /// <summary>
        ///   The inclusive, lower boundary for the length of <see cref="String" />
        ///   instances created by this generator.
        /// </summary>
        public int Minimum { get; }

        /// <summary>
        ///   The inclusive, upper boundary for the length of <see cref="String" />
        ///   instances created by this generator.
        /// </summary>
        public int Maximum { get; }

        /// <summary>
        ///   The set of <see cref="Char" /> this <see cref="StringGenerator" />
        ///   will utilize from when creating instances of <see cref="String" />.
        /// </summary>
        public ISet<Char> Characters { get; }

        /// <summary>
        ///   Instantiates a <see cref="StringGenerator" /> that can create
        ///   <see cref="String" /> instances with lengths that range from 0 to 255
        ///   characters (inclusively). The characters within the <see cref="String" />
        ///   will be of the <see cref="ISet{Char}" />
        ///   <see cref="CharacterSets.AsciiPrintable" />.
        /// </summary>
        public StringGenerator() :
            this(0, 255, defaultCharacters) {}

        /// <summary>
        ///   Instantiates a <see cref="StringGenerator" /> that can create
        ///   <see cref="String" /> instances with a length defined via the
        ///   <paramref name="length" /> parameter.  The characters within
        ///   the <see cref="String" /> will be of the <see cref="ISet{Char}" />
        ///   <see cref="CharacterSets.AsciiPrintable" />.
        /// </summary>
        /// <param name="length">
        ///   The length in characters of any <see cref="String" /> generated by this
        ///   <see cref="StringGenerator" />.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        ///   Thrown when the <paramref name="length" /> is less than 0.
        /// </exception>
        public StringGenerator(int length) :
            this(length, defaultCharacters) {}

        /// <summary>
        ///   Instantiates a <see cref="StringGenerator" /> that can create
        ///   <see cref="String" /> instances with a length defined via the
        ///   <paramref name="length" /> parameter. The characters within
        ///   the <see cref="String" /> are those provided via the
        ///   <paramref name="characters" /> parameter.
        /// </summary>
        /// <param name="length">
        ///   The length in characters of any <see cref="String" /> generated by this
        ///   <see cref="StringGenerator" />.
        /// </param>
        /// <param name="characters">
        ///   An explicit set of characters that this <see cref="StringGenerator" />
        ///   will use when it generates <see cref="String" /> instances.
        /// </param>
        /// <exception cref="ArgumentNullException">
        ///   Thrown when <paramref name="characters" /> is null.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        ///   Thrown when the <paramref name="length" /> is less than 0.
        /// </exception>
        /// <exception cref="ArgumentException">
        ///   Thrown when the <paramref name="characters" /> set is empty, but the
        ///   <paramref name="length" /> is greater than 0.
        /// </exception>
        public StringGenerator(int length, ISet<Char> characters) {
            if (characters == null) {
                throw new ArgumentNullException(nameof(characters));
            }

            if (length < 0) {
                throw new ArgumentOutOfRangeException(
                    $"The length ({length:N0} was less than zero.",
                    nameof(length)
                );
            }

            if (!characters.Any() && length > 0) {
                throw new ArgumentException(
                    $"The '{nameof(characters)}' set is empty, " +
                    $"but the '{nameof(length)}' is greater than 0.",
                    nameof(characters)
                );
            }

            this.Minimum = length;
            this.Maximum = length;
            this.Characters = characters.ToImmutableHashSet();

            this.characters = characters.ToArray();
        }

        /// <summary>
        ///   Instantiates a <see cref="StringGenerator" /> that can create
        ///   <see cref="String" /> instances with lengths that range from
        ///   <paramref name="minimum" /> to <paramref name="maximum" />
        ///   characters (inclusively). The characters within the <see cref="String" />
        ///   will be of the <see cref="ISet{Char}" />
        ///   <see cref="CharacterSets.AsciiPrintable" />.
        /// </summary>
        /// <param name="minimum">
        ///   The minimum length in characters of any <see cref="String" /> generated
        ///   by this <see cref="StringGenerator" />.
        /// </param>
        /// <param name="maximum">
        ///   The maximum length in characters of any <see cref="String" /> generated
        ///   by this <see cref="StringGenerator" />.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        ///   Thrown when the <paramref name="minimum" /> is less than 0.
        /// </exception>
        /// <exception cref="ArgumentException">
        ///   Thrown when the <paramref name="minimum" /> is greater than the
        ///   <paramref name="maximum" />.
        /// </exception>
        public StringGenerator(int minimum, int maximum) :
            this(minimum, maximum, defaultCharacters) {}

        /// <summary>
        ///   Instantiates a <see cref="StringGenerator" /> that can create
        ///   <see cref="String" /> instances with lengths that range from
        ///   <paramref name="minimum" /> to <paramref name="maximum" />
        ///   characters (inclusively). The characters within
        ///   the <see cref="String" /> are those provided via the
        ///   <paramref name="characters" /> parameter.
        /// </summary>
        /// <param name="minimum">
        ///   The minimum length in characters of any <see cref="String" /> generated
        ///   by this <see cref="StringGenerator" />.
        /// </param>
        /// <param name="maximum">
        ///   The maximum length in characters of any <see cref="String" /> generated
        ///   by this <see cref="StringGenerator" />.
        /// </param>
        /// <param name="characters">
        ///   An explicit set of characters that this <see cref="StringGenerator" />
        ///   will use when it generates <see cref="String" /> instances.
        /// </param>
        /// <exception cref="ArgumentNullException">
        ///   Thrown when <paramref name="characters" /> is null.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        ///   Thrown when the <paramref name="minimum" /> is less than 0.
        /// </exception>
        /// <exception cref="ArgumentException">
        ///   Thrown when the <paramref name="minimum" /> is greater than the
        ///   <paramref name="maximum" />.
        /// </exception>
        /// <exception cref="ArgumentException">
        ///   Thrown when the <paramref name="characters" /> set is empty, but the
        ///   <paramref name="maximum" /> is greater than 0.
        /// </exception>
        public StringGenerator(int minimum, int maximum, ISet<Char> characters) {
            if (characters == null) {
                throw new ArgumentNullException(nameof(characters));
            }

            if (minimum < 0) {
                throw new ArgumentOutOfRangeException(
                    $"The minimum ({minimum:N0} was less than zero.",
                    nameof(minimum)
                );
            }

            if (maximum < minimum) {
                throw new ArgumentException(
                    $"The '{nameof(minimum)}' ({minimum:N0}) was not less than " +
                    $"the '{nameof(maximum)}' ({maximum:N0}).",
                    nameof(minimum)
                );
            }

            if (!characters.Any() && maximum > 0) {
                throw new ArgumentException(
                    $"The '{nameof(characters)}' set is empty, " +
                    $"but the '{nameof(maximum)}' is greater than 0.",
                    nameof(characters)
                );
            }

            this.Minimum = minimum;
            this.Maximum = maximum;
            this.characters = characters.ToArray();
        }

        private int NextInclusive(int low, int high) {
            if (high == Int32.MaxValue) {
                return (Int32)this.random.NextInt64(low, (Int64)(high + 1));
            } else {
                return this.random.Next(low, high);
            }
        }

        /// <summary>
        ///   Creates a random <see cref="String" /> with a length that ranges
        ///   from <see cref="Minimum" /> to <see cref="Maximum" /> utilizing
        ///   the characters defined in the <see cref="Characters" /> set.
        /// </summary>
        /// <returns>
        ///   A non-null string with a length that ranges from
        ///   <see cref="Minimum" /> to <see cref="Maximum" /> utilizing
        ///   the characters defined in the <see cref="Characters" /> set.
        /// </returns>
        public String Next() {
            var length = this.NextInclusive(this.Minimum, this.Maximum);
            var buffer = new StringBuilder(length);

            for (var character = 0; character < length; character++) {
                var index = this.random.Next(this.characters.Length);

                buffer.Append(this.characters[index]);
            }

            return buffer.ToString();
        }

    }



}
